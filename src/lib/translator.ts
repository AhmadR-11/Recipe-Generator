import axios from 'axios';

const dictionary: Record<string, string> = {
  "blog": "بلاگ",
  "summary": "خلاصہ",
  "text": "متن",
  "article": "مضمون",
  "sentence": "جملہ",
  "information": "معلومات",
  "title": "عنوان",
  // Add more as needed
};

/**
 * Translates text to Urdu using Gemini API
 * Falls back to dictionary-based translation if AI translation fails
 */
export async function translateToUrdu(text: string): Promise<string> {
  try {
    // Try AI-based translation first
    return await generateAITranslation(text);
  } catch (error) {
    console.error("AI translation failed, falling back to dictionary method:", error);
    // Fallback to dictionary-based translation
    return dictionaryTranslate(text);
  }
}

/**
 * Translates title to Urdu using Gemini API
 */
export async function translateTitleToUrdu(title: string): Promise<string> {
  try {
    // Try AI-based translation first
    return await generateAITranslation(title);
  } catch (error) {
    console.error("AI title translation failed, falling back to dictionary method:", error);
    // Fallback to dictionary-based translation
    return dictionaryTranslate(title);
  }
}

/**
 * Uses Gemini API to translate text to Urdu
 */
async function generateAITranslation(text: string): Promise<string> {
  const apiKey = process.env.GEMINI_API_KEY;
  
  if (!apiKey) {
    throw new Error("GEMINI_API_KEY is not configured in environment variables");
  }

  const url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";
  
  try {
    const response = await axios.post(
      `${url}?key=${apiKey}`,
      {
        contents: [
          {
            parts: [
              {
                text: `Translate the following English text to Urdu. Provide ONLY the Urdu translation without any explanations or notes:

${text}`
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.2,
          maxOutputTokens: 1000,
        }
      },
      {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 10000 // 10 second timeout
      }
    );

    // Extract the translation from the response
    const translatedText = response.data.candidates[0]?.content?.parts[0]?.text;
    
    if (!translatedText) {
      throw new Error("No translation was generated by the API");
    }
    
    return translatedText.trim();
  } catch (error) {
    console.error("Error calling Gemini API for translation:", error);
    
    // If we get a 503 error, wait and retry once with a different model
    if (axios.isAxiosError(error) && error.response?.status === 503) {
      try {
        console.log("Retrying translation after 503 error...");
        // Wait 2 seconds before retry
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Try with a different model as fallback
        const fallbackUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent";
        
        const retryResponse = await axios.post(
          `${fallbackUrl}?key=${apiKey}`,
          {
            contents: [
              {
                parts: [
                  {
                    text: `Translate the following English text to Urdu. Provide ONLY the Urdu translation without any explanations or notes:

${text}`
                  }
                ]
              }
            ],
            generationConfig: {
              temperature: 0.2,
              maxOutputTokens: 1000,
            }
          },
          {
            headers: {
              'Content-Type': 'application/json'
            },
            timeout: 15000 // Longer timeout for retry
          }
        );
        
        const translatedText = retryResponse.data.candidates[0]?.content?.parts[0]?.text;
        
        if (!translatedText) {
          throw new Error("No translation was generated by the API on retry");
        }
        
        return translatedText.trim();
      } catch (retryError) {
        console.error("Translation retry also failed:", retryError);
        throw retryError;
      }
    }
    
    throw error;
  }
}

/**
 * Dictionary-based translation (fallback method)
 */
function dictionaryTranslate(text: string): string {
  return text
    .split(/\b/)
    .map((word) => dictionary[word.toLowerCase()] || word)
    .join("");
}